// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: urls.sql

package database

import (
	"context"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (short_url, long_url, created_at, updated_at, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, short_url, long_url, created_at, updated_at, user_id
`

type CreateURLParams struct {
	ShortUrl  string
	LongUrl   string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    int32
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.ShortUrl,
		arg.LongUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls
WHERE user_id = $1 AND 
short_url = $2
`

type DeleteURLParams struct {
	UserID   int32
	ShortUrl string
}

func (q *Queries) DeleteURL(ctx context.Context, arg DeleteURLParams) error {
	_, err := q.db.ExecContext(ctx, deleteURL, arg.UserID, arg.ShortUrl)
	return err
}

const selectURL = `-- name: SelectURL :one
SELECT id, short_url, long_url, created_at, updated_at, user_id 
FROM urls
WHERE short_url = $1
`

func (q *Queries) SelectURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, selectURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const updateShortURL = `-- name: UpdateShortURL :one
UPDATE urls
SET long_url = $1
WHERE user_id = $2 AND 
short_url = $3
RETURNING id, short_url, long_url, created_at, updated_at, user_id
`

type UpdateShortURLParams struct {
	LongUrl  string
	UserID   int32
	ShortUrl string
}

func (q *Queries) UpdateShortURL(ctx context.Context, arg UpdateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateShortURL, arg.LongUrl, arg.UserID, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
